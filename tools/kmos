#!/usr/bin/env python

#    Copyright 2009-2011 Max J. Hoffmann (mjhoffmann@gmail.com)
#    This file is part of kmos.
#
#    kmos is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    kmos is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with kmos.  If not, see <http://www.gnu.org/licenses/>.

import os
import optparse

usage = {}
usage['edit'] = """kmos edit <xml-file>
                        open the kmos xml-file in a GUI to edit
                        the model."""

usage['view'] = """kmos view
                        Except a kmc_model.so and kmc_settings in the
                        same directory and will start to simulate the
                        model visually"""
usage['export'] = """kmos export <xml-file> [<export-path>]
                        Takes a kmos xml-file and exports all generated
                        source code to the export-path. There it will
                        try to build the kmc_model.so."""
usage['import'] = """kmos import <xml-file>
                        Takes a kmos xml-file and opens an ipython shell
                        with the project_tree imported as pt."""
usage['export-view'] = """kmos export-view <xml-file>
                        Exports an XML file, compiles and runs the simulation."""

parser = optparse.OptionParser(
    'Usage: %prog [help] (' + '|'.join(usage.keys()) + ') [options]' )

parser.add_option('-s', '--source-only', dest='source_only', action='store_true', default=False)

options, args = parser.parse_args()


if len(args) < 1:
    parser.error('Command expected')

if args[0] == 'help':
    if len(args) < 2:
        parser.error('Which help do you  want?')
    if args[1] in usage:
        print('Usage: %s\n' % usage[args[1]])
    else:
        print("Command not known or not documented.")

elif args[0] == 'edit':
    from kmos.gui import main
    main()
elif args[0] == 'export':
    if len(args) < 2:
        parser.error('XML file and export path expected.')
    if len(args) < 3:
        out_dir = os.path.splitext(args[1])[0]
        print('No export path provided. Exporting to %s' % out_dir)
        args.append(out_dir)
    if options.source_only:
        os.system('kmos-export-program -s %s %s' % (args[1], args[2]))
    else:
        os.system('kmos-export-program %s %s' % (args[1], args[2]))
elif args[0] == 'import' :
    import kmos.io
    pt = kmos.io.import_xml(args[1])
    import IPython
    if hasattr(IPython, 'release') and \
       map(int, IPython.release.version.split('.') ) >= [0, 11]:
        from IPython.frontend.terminal.embed import InteractiveShellEmbed
        InteractiveShellEmbed(banner1='Note: pt = kmos.io.import_xml(\'%s\')' % args[1])()
    else:
        from IPython.Shell import IPShellEmbed
        IPShellEmbed(banner='Note: pt = kmos.io.import_xml(\'%s\')' % args[1])()
elif args[0] == 'build':
    os.system('kmos-build')
elif args[0] == 'view':
    from kmos.view import main
    main()
elif args[0] == 'benchmark':
    nsteps = 1000000
    from time import time
    from kmos.run import KMC_Model
    model = KMC_Model(print_rates=False, banner=False)
    time0 = time()
    model.do_steps(nsteps)
    print('%s steps took %.2f seconds' % (nsteps, time()-time0))
elif args[0] == 'export-view':
    out_dir = os.path.splitext(args[1])[0]
    print('No export path provided. Exporting to %s' % out_dir)
    args.append(out_dir)
    os.system('kmos-export-program %s %s' % (args[1], args[2]))
    os.chdir(out_dir)
    os.system('kmos-view')

else:
    parser.error('Command not understood.')
