In KMC TPD/TPR, there can be big problems if the temperature is started too low or if the simulation is allowed to run past all of the molecules desorbing.  For runfile 1 and runfile 2, we simply use 300K to 325K as a temperature range that we know will work without any issues for the particular number of sites and activation energy used in those examples. Some of the other TPD/TPR examples have more complex algorithms.

runfile 1 is using the snasphots module
runfile 2 and runfile 3 are using the snapshots module and export import to show how to stop a simulation partway and continue it along the exact same trajectory as runfile 1.  Runfile 2 exports and stops once the temperature is above 310K and then continues.  It is important to recognize that "T" after "T_incr" is the temperature at the end of a snapshot, and serves as the temperature for the beginning of the next snapshot.


Currently, in the export import example for runfile2 and runfile3, the trajectories are not the same as runfile1. I don't know 
what the reason is. I speculated that there was also some random number generation occuring inside of the python side, but that does not seem to be 
correct. At present, export import allows one to reproducibly export and import a simulation. However, it is still the case that stopping a simulation and starting a simulation results in a different trajectory compared to not stopping the simulation.  This needs to be fixed so that we can attempt to interrogate a particular simulation in stages if we have already run the simulation and want to run it again to understand what happened. Based on looking at a few runfiles, such as the one inside examples\MyFirstTPD_DesorptionOnly_local_smart, I tried to fix the situation by doing something like this near the top of the MyFirstTPD_Precovered runfile: sg.kmc_settings.random_seed = random_seed  However, in MyFirstTPD_Precovered, this line did not seem to do anything to change the trajectory. I don't understand why. Because if it really changes the trajectory in MyFirstTPD_DesorptionOnly_local_smart, I would expect it to do so here, also.
